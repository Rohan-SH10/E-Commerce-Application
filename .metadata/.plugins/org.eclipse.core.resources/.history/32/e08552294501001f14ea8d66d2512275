package com.ecommerce.retail_electronicsapp.jwt;

import java.io.IOException;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.ecommerce.retail_electronicsapp.exceptions.TokenIsBlockedException;
import com.ecommerce.retail_electronicsapp.repository.AccessTokenRepository;
import com.ecommerce.retail_electronicsapp.repository.RefreshTokenRepository;
import com.ecommerce.retail_electronicsapp.repository.UserRepository;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.AllArgsConstructor;

@Component
@AllArgsConstructor
public class JwtFilter extends OncePerRequestFilter{
	
	private AccessTokenRepository accessRepository;
	private RefreshTokenRepository refreshRepository;
	private JwtService jwtService;
	private UserRepository userRepo;
	

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
		String at=null;
		String rt=null;
		Cookie[] cookies = request.getCookies();
		for(Cookie cookie: cookies) {
			if(cookie.getName().equalsIgnoreCase("at"))
				at=cookie.getValue();
			if(cookie.getName().equalsIgnoreCase("rt"))
				rt=cookie.getValue();
			
		}
		if(accessRepository.existsByTokenAndIsBlocked(at,true)&&refreshRepository.existsByTokenAndIsBlocked(rt,true)) {
			throw new TokenIsBlockedException("Token is blocked");
			
		}
		String username=jwtService.getUsername(at);
		if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null) {
			UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, , null)
		}
		filterChain.doFilter(request, response);
		
	}

}
